// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskMaster.Modules.Teaching.DAL;

#nullable disable

namespace TaskMaster.Modules.Teaching.DAL.Migrations
{
    [DbContext(typeof(TeachingDbContext))]
    [Migration("20250614112800_ExerciseType")]
    partial class ExerciseType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Teaching")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Assignments", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.AssignmentExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExerciseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId", "ExerciseId");

                    b.ToTable("AssignmentExercises", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.ClassAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TeachingClassId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TeachingClassId");

                    b.ToTable("ClassAssignments", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.OpenForm.EssayAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.Property<string>("WrittenEssay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EssayAnswers", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.OpenForm.MailAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.Property<string>("WrittenMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MailAnswers", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.OpenForm.SummaryOfTextAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.Property<string>("WrittenSummary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SummaryOfTextAnswers", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Schools", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.SchoolAdmin", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.HasKey("SchoolId", "AdminId");

                    b.ToTable("SchoolAdmins", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.SchoolTeacher", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("SchoolId", "TeacherId");

                    b.ToTable("SchoolTeachers", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.TeachingClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("MainTeacherId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SchoolId1")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<Guid[]>("StudentsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.PrimitiveCollection<Guid[]>("SubTeachersIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolId1");

                    b.ToTable("TeachingClasses", "Teaching");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.AssignmentExercise", b =>
                {
                    b.HasOne("TaskMaster.Modules.Teaching.Entities.Assignment", "Assignment")
                        .WithMany("Exercises")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.ClassAssignment", b =>
                {
                    b.HasOne("TaskMaster.Modules.Teaching.Entities.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskMaster.Modules.Teaching.Entities.TeachingClass", "TeachingClass")
                        .WithMany("Assignments")
                        .HasForeignKey("TeachingClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("TeachingClass");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.OpenForm.EssayAnswer", b =>
                {
                    b.OwnsMany("TaskMaster.Modules.Teaching.Entities.Mistake", "Mistakes", b1 =>
                        {
                            b1.Property<Guid>("EssayAnswerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CorrectAnswer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Explanation")
                                .HasColumnType("text");

                            b1.Property<string>("StudentsAnswer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("EssayAnswerId", "Id");

                            b1.ToTable("EssayAnswerMistakes", "Teaching");

                            b1.WithOwner()
                                .HasForeignKey("EssayAnswerId");
                        });

                    b.Navigation("Mistakes");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.OpenForm.MailAnswer", b =>
                {
                    b.OwnsMany("TaskMaster.Modules.Teaching.Entities.Mistake", "Mistakes", b1 =>
                        {
                            b1.Property<Guid>("MailAnswerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CorrectAnswer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Explanation")
                                .HasColumnType("text");

                            b1.Property<string>("StudentsAnswer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MailAnswerId", "Id");

                            b1.ToTable("MailAnswerMistakes", "Teaching");

                            b1.WithOwner()
                                .HasForeignKey("MailAnswerId");
                        });

                    b.Navigation("Mistakes");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.OpenForm.SummaryOfTextAnswer", b =>
                {
                    b.OwnsMany("TaskMaster.Modules.Teaching.Entities.Mistake", "Mistakes", b1 =>
                        {
                            b1.Property<Guid>("SummaryOfTextAnswerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CorrectAnswer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Explanation")
                                .HasColumnType("text");

                            b1.Property<string>("StudentsAnswer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SummaryOfTextAnswerId", "Id");

                            b1.ToTable("SummaryOfTextAnswerMistakes", "Teaching");

                            b1.WithOwner()
                                .HasForeignKey("SummaryOfTextAnswerId");
                        });

                    b.Navigation("Mistakes");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.SchoolAdmin", b =>
                {
                    b.HasOne("TaskMaster.Modules.Teaching.Entities.School", "School")
                        .WithMany("SchoolAdmins")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.SchoolTeacher", b =>
                {
                    b.HasOne("TaskMaster.Modules.Teaching.Entities.School", "School")
                        .WithMany("SchoolTeachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.TeachingClass", b =>
                {
                    b.HasOne("TaskMaster.Modules.Teaching.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskMaster.Modules.Teaching.Entities.School", null)
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId1");

                    b.Navigation("School");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.Assignment", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolAdmins");

                    b.Navigation("SchoolTeachers");
                });

            modelBuilder.Entity("TaskMaster.Modules.Teaching.Entities.TeachingClass", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
